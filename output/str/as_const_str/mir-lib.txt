// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_test_func(_1: &mut String) -> Result<(), core::fmt::Error> {
    debug buffer => _1;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _2: core::fmt::Arguments<'_>;
    let mut _3: &[&str];
    scope 1 (inlined Arguments::<'_>::new_const) {
        debug pieces => _3;
        let mut _4: &[core::fmt::rt::Argument<'_>];
    }
    scope 2 (inlined <String as Write>::write_fmt) {
        debug self => _1;
        debug args => _2;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc3<imm>: &[&str; 1]} as &[&str] (PointerCoercion(Unsize));
        StorageLive(_4);
        _4 = const {alloc6<imm>: &[core::fmt::rt::Argument<'_>; 0]} as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _2 = Arguments::<'_> { pieces: _3, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _4 };
        StorageDead(_4);
        StorageDead(_3);
        _0 = <&mut String as write_fmt::SpecWriteFmt>::spec_write_fmt(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        return;
    }
}

alloc7 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc6 (size: 0, align: 8) {}

alloc3 (size: 16, align: 8) {
    ╾─────alloc2<imm>─────╼ 14 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2 (size: 20, align: 1) {
    0x00 │ 53 69 6d 70 6c 65 20 69 6e 6c 69 6e 65 20 73 74 │ Simple inline st
    0x10 │ 72 69 6e 67                                     │ ring
}

promoted[0] in my_test_func: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Simple inline string"];
        _0 = &_1;
        return;
    }
}
