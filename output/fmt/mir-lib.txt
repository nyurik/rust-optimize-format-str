// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_test_func_with_param(_1: &mut String, _2: i32) -> Result<(), core::fmt::Error> {
    debug buffer => _1;
    debug value => _2;
    let mut _0: core::result::Result<(), core::fmt::Error>;
    let mut _3: core::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let mut _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &i32;
    scope 1 (inlined core::fmt::rt::Argument::<'_>::new_display::<i32>) {
        debug x => _9;
        let mut _10: for<'a, 'b, 'c> fn(&'a i32, &'b mut core::fmt::Formatter<'c>) -> core::result::Result<(), core::fmt::Error>;
        scope 2 (inlined core::fmt::rt::Argument::<'_>::new::<i32>) {
            debug x => _9;
            debug f => _10;
            let mut _11: for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut core::fmt::Formatter<'c>) -> core::result::Result<(), core::fmt::Error>;
            let mut _12: &core::fmt::rt::Opaque;
            scope 3 {
            }
        }
    }
    scope 4 (inlined Arguments::<'_>::new_v1) {
        debug pieces => _4;
        debug args => _5;
        let mut _13: bool;
        let mut _14: usize;
        let mut _15: bool;
        let mut _16: usize;
        let _17: !;
        let mut _18: core::fmt::Arguments<'_>;
        let mut _19: &[&str];
        scope 5 (inlined Arguments::<'_>::new_const) {
            debug pieces => _19;
            let mut _20: &[core::fmt::rt::Argument<'_>];
        }
    }
    scope 6 (inlined <String as Write>::write_fmt) {
        debug self => _1;
        debug args => _3;
        scope 7 (inlined <&mut String as write_fmt::SpecWriteFmt>::spec_write_fmt) {
            debug self => _1;
            debug args => _3;
            let mut _21: &mut dyn core::fmt::Write;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = const {alloc5<imm>: &[&str; 2]} as &[&str] (PointerCoercion(Unsize));
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        StorageLive(_10);
        _10 = <i32 as core::fmt::Display>::fmt as for<'a, 'b, 'c> fn(&'a i32, &'b mut core::fmt::Formatter<'c>) -> core::result::Result<(), core::fmt::Error> (PointerCoercion(ReifyFnPointer));
        StorageLive(_11);
        _11 = _10 as for<'a, 'b, 'c> fn(&'a core::fmt::rt::Opaque, &'b mut core::fmt::Formatter<'c>) -> core::result::Result<(), core::fmt::Error> (Transmute);
        StorageLive(_12);
        _12 = _9 as &core::fmt::rt::Opaque (Transmute);
        _8 = core::fmt::rt::Argument::<'_> { value: move _12, formatter: move _11 };
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        _7 = [move _8];
        StorageDead(_8);
        _6 = &_7;
        _5 = move _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_13);
        _14 = Len((*_5));
        _13 = Lt(const 2_usize, _14);
        switchInt(move _13) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        StorageLive(_15);
        StorageLive(_16);
        _16 = Add(_14, const 1_usize);
        _15 = Gt(const 2_usize, move _16);
        switchInt(move _15) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_16);
        goto -> bb3;
    }

    bb3: {
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc7<imm>: &[&str; 1]} as &[&str] (PointerCoercion(Unsize));
        StorageLive(_20);
        _20 = const {alloc9<imm>: &[core::fmt::rt::Argument<'_>; 0]} as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = Arguments::<'_> { pieces: _19, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: move _20 };
        StorageDead(_20);
        StorageDead(_19);
        _17 = panic_fmt(move _18) -> unwind continue;
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        _3 = Arguments::<'_> { pieces: _4, fmt: const Option::<&[core::fmt::rt::Placeholder]>::None, args: _5 };
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_21);
        _21 = _1 as &mut dyn core::fmt::Write (PointerCoercion(Unsize));
        _0 = core::fmt::write(move _21, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_3);
        StorageDead(_7);
        return;
    }
}

alloc11 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc10 (size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc9 (size: 0, align: 8) {}

alloc7 (size: 16, align: 8) {
    ╾─────alloc8<imm>─────╼ 0c 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc8 (size: 12, align: 1) {
    69 6e 76 61 6c 69 64 20 61 72 67 73             │ invalid args
}

alloc5 (size: 32, align: 8) {
    0x00 │ ╾─────alloc4<imm>─────╼ 0a 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾─────alloc6<imm>─────╼ 0c 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc4 (size: 10, align: 1) {
    49 74 65 72 61 74 69 6f 6e 20                   │ Iteration 
}

alloc6 (size: 12, align: 1) {
    20 77 61 73 20 77 72 69 74 74 65 6e             │  was written
}

promoted[0] in my_test_func_with_param: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Iteration ", const " was written"];
        _0 = &_1;
        return;
    }
}
