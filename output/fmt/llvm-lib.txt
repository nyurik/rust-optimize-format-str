; ModuleID = 'libtest.e5e93ba33aa89e1-cgu.0'
source_filename = "libtest.e5e93ba33aa89e1-cgu.0"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>" = type { [1 x i64], i64, [1 x i64] }
%"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>" = type { i64, [2 x i64] }
%"core::fmt::rt::Argument<'_>" = type { ptr, ptr }
%"core::fmt::Arguments<'_>" = type { { ptr, i64 }, { ptr, i64 }, %"core::option::Option<&[core::fmt::rt::Placeholder]>" }
%"core::option::Option<&[core::fmt::rt::Placeholder]>" = type { ptr, [1 x i64] }

@__rust_no_alloc_shim_is_unstable = external global i8
@vtable.1 = private unnamed_addr constant <{ ptr, [16 x i8], ptr, ptr, ptr }> <{ ptr @"core::ptr::drop_in_place<alloc::string::String>", [16 x i8] c"\18\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"<alloc::string::String as core::fmt::Write>::write_str", ptr @"<alloc::string::String as core::fmt::Write>::write_char", ptr @core::fmt::Write::write_fmt }>, align 8
@alloc_0e9bfa8122b31f65eb0c7416f8e57492 = private unnamed_addr constant <{ [10 x i8] }> <{ [10 x i8] c"Iteration " }>, align 1
@alloc_053692fdbb3db9cc0d60f7873b0d73eb = private unnamed_addr constant <{ [12 x i8] }> <{ [12 x i8] c" was written" }>, align 1
@alloc_d6cc9c75158bbcf20176688a556567dd = private unnamed_addr constant <{ ptr, [8 x i8], ptr, [8 x i8] }> <{ ptr @alloc_0e9bfa8122b31f65eb0c7416f8e57492, [8 x i8] c"\0A\00\00\00\00\00\00\00", ptr @alloc_053692fdbb3db9cc0d60f7873b0d73eb, [8 x i8] c"\0C\00\00\00\00\00\00\00" }>, align 8

; core::fmt::Write::write_fmt
; Function Attrs: nonlazybind uwtable
define internal noundef zeroext i1 @core::fmt::Write::write_fmt(ptr noalias noundef align 8 dereferenceable(24) %self, ptr noalias nocapture noundef readonly align 8 dereferenceable(48) %args) unnamed_addr #0 {
start:
; call core::fmt::write
  %0 = tail call noundef zeroext i1 @core::fmt::write(ptr noundef nonnull align 1 %self, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.1, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %args)
  ret i1 %0
}

; core::ptr::drop_in_place<alloc::string::String>
; Function Attrs: nounwind nonlazybind uwtable
define internal void @"core::ptr::drop_in_place<alloc::string::String>"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %_1) unnamed_addr #1 personality ptr @rust_eh_personality {
start:
  %_1.val = load i64, ptr %_1, align 8
  %0 = icmp eq i64 %_1.val, 0
  br i1 %0, label %"core::ptr::drop_in_place<alloc::vec::Vec<u8>>.exit", label %"<alloc::alloc::Global as core::alloc::Allocator>::deallocate.exit.i.i4.i"

"<alloc::alloc::Global as core::alloc::Allocator>::deallocate.exit.i.i4.i": ; preds = %start
  %1 = getelementptr inbounds i8, ptr %_1, i64 8
  %_1.val1 = load ptr, ptr %1, align 8, !nonnull !3, !noundef !3
  tail call void @__rust_dealloc(ptr noundef nonnull %_1.val1, i64 noundef %_1.val, i64 noundef 1) #18
  br label %"core::ptr::drop_in_place<alloc::vec::Vec<u8>>.exit"

"core::ptr::drop_in_place<alloc::vec::Vec<u8>>.exit": ; preds = %start, %"<alloc::alloc::Global as core::alloc::Allocator>::deallocate.exit.i.i4.i"
  ret void
}

; <alloc::string::String as core::fmt::Write>::write_char
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef zeroext i1 @"<alloc::string::String as core::fmt::Write>::write_char"(ptr noalias nocapture noundef align 8 dereferenceable(24) %self, i32 noundef %c) unnamed_addr #2 personality ptr @rust_eh_personality {
start:
  %_10.sroa.0.i = alloca i32, align 4
  tail call void @llvm.experimental.noalias.scope.decl(metadata !4)
  %_12.i = icmp ult i32 %c, 128
  br i1 %_12.i, label %bb4.i, label %bb12.i.i

bb12.i.i:                                         ; preds = %start
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %_10.sroa.0.i)
  store i32 0, ptr %_10.sroa.0.i, align 4, !noalias !4
  %_73.i.i = icmp ult i32 %c, 2048
  br i1 %_73.i.i, label %bb7.i.i, label %bb14.i.i

bb14.i.i:                                         ; preds = %bb12.i.i
  %_74.i.i = icmp ult i32 %c, 65536
  br i1 %_74.i.i, label %bb8.i.i, label %bb9.i.i

bb7.i.i:                                          ; preds = %bb12.i.i
  %_20.i.i = lshr i32 %c, 6
  %0 = trunc i32 %_20.i.i to i8
  %1 = or disjoint i8 %0, -64
  store i8 %1, ptr %_10.sroa.0.i, align 4, !alias.scope !7, !noalias !4
  %2 = trunc i32 %c to i8
  %_22.i.i = and i8 %2, 63
  %3 = or disjoint i8 %_22.i.i, -128
  %_10.sroa.0.i.1.sroa_idx11 = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 1
  store i8 %3, ptr %_10.sroa.0.i.1.sroa_idx11, align 1, !alias.scope !7, !noalias !4
  br label %core::char::methods::encode_utf8_raw.exit.i

bb8.i.i:                                          ; preds = %bb14.i.i
  %_30.i.i = lshr i32 %c, 12
  %4 = trunc i32 %_30.i.i to i8
  %5 = or disjoint i8 %4, -32
  store i8 %5, ptr %_10.sroa.0.i, align 4, !alias.scope !7, !noalias !4
  %_34.i.i = lshr i32 %c, 6
  %6 = trunc i32 %_34.i.i to i8
  %_32.i.i = and i8 %6, 63
  %7 = or disjoint i8 %_32.i.i, -128
  %_10.sroa.0.i.1.sroa_idx10 = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 1
  store i8 %7, ptr %_10.sroa.0.i.1.sroa_idx10, align 1, !alias.scope !7, !noalias !4
  %8 = trunc i32 %c to i8
  %_36.i.i = and i8 %8, 63
  %9 = or disjoint i8 %_36.i.i, -128
  %_10.sroa.0.i.2.sroa_idx12 = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 2
  store i8 %9, ptr %_10.sroa.0.i.2.sroa_idx12, align 2, !alias.scope !7, !noalias !4
  br label %core::char::methods::encode_utf8_raw.exit.i

bb9.i.i:                                          ; preds = %bb14.i.i
  %_45.i.i = lshr i32 %c, 18
  %10 = trunc i32 %_45.i.i to i8
  %_43.i.i = and i8 %10, 7
  %11 = or disjoint i8 %_43.i.i, -16
  store i8 %11, ptr %_10.sroa.0.i, align 4, !alias.scope !7, !noalias !4
  %_49.i.i = lshr i32 %c, 12
  %12 = trunc i32 %_49.i.i to i8
  %_47.i.i = and i8 %12, 63
  %13 = or disjoint i8 %_47.i.i, -128
  %_10.sroa.0.i.1.sroa_idx = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 1
  store i8 %13, ptr %_10.sroa.0.i.1.sroa_idx, align 1, !alias.scope !7, !noalias !4
  %_53.i.i = lshr i32 %c, 6
  %14 = trunc i32 %_53.i.i to i8
  %_51.i.i = and i8 %14, 63
  %15 = or disjoint i8 %_51.i.i, -128
  %_10.sroa.0.i.2.sroa_idx = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 2
  store i8 %15, ptr %_10.sroa.0.i.2.sroa_idx, align 2, !alias.scope !7, !noalias !4
  %16 = trunc i32 %c to i8
  %_55.i.i = and i8 %16, 63
  %17 = or disjoint i8 %_55.i.i, -128
  %_10.sroa.0.i.3.sroa_idx = getelementptr inbounds i8, ptr %_10.sroa.0.i, i64 3
  store i8 %17, ptr %_10.sroa.0.i.3.sroa_idx, align 1, !alias.scope !7, !noalias !4
  br label %core::char::methods::encode_utf8_raw.exit.i

core::char::methods::encode_utf8_raw.exit.i: ; preds = %bb9.i.i, %bb8.i.i, %bb7.i.i
  %_510.i.i = phi i64 [ 4, %bb9.i.i ], [ 3, %bb8.i.i ], [ 2, %bb7.i.i ]
  tail call void @llvm.experimental.noalias.scope.decl(metadata !10)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !13)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !16)
  %18 = getelementptr inbounds i8, ptr %self, i64 16
  %len.i.i.i.i.i = load i64, ptr %18, align 8, !alias.scope !19, !noalias !20, !noundef !3
  %19 = load i64, ptr %self, align 8, !alias.scope !22, !noalias !20, !noundef !3
  %_7.i.i.i.i.i = sub i64 %19, %len.i.i.i.i.i
  %_5.i.i.i.i.i = icmp ult i64 %_7.i.i.i.i.i, %_510.i.i
  br i1 %_5.i.i.i.i.i, label %bb1.i.i.i.i.i, label %"alloc::vec::Vec<T,A>::extend_from_slice.exit.i"

bb1.i.i.i.i.i:                                    ; preds = %core::char::methods::encode_utf8_raw.exit.i
; call alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
  tail call fastcc void @"alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle"(ptr noalias noundef nonnull align 8 dereferenceable(16) %self, i64 noundef %len.i.i.i.i.i, i64 noundef %_510.i.i), !noalias !20
  %len.pre.i.i.i.i = load i64, ptr %18, align 8, !alias.scope !19, !noalias !20
  br label %"alloc::vec::Vec<T,A>::extend_from_slice.exit.i"

"alloc::vec::Vec<T,A>::extend_from_slice.exit.i": ; preds = %bb1.i.i.i.i.i, %core::char::methods::encode_utf8_raw.exit.i
  %len.i.i.i.i = phi i64 [ %len.i.i.i.i.i, %core::char::methods::encode_utf8_raw.exit.i ], [ %len.pre.i.i.i.i, %bb1.i.i.i.i.i ]
  %20 = getelementptr inbounds i8, ptr %self, i64 8
  %self1.i1.i.i.i = load ptr, ptr %20, align 8, !alias.scope !19, !noalias !20, !nonnull !3, !noundef !3
  %dst.i.i.i.i = getelementptr inbounds i8, ptr %self1.i1.i.i.i, i64 %len.i.i.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(1) %dst.i.i.i.i, ptr noundef nonnull align 4 dereferenceable(1) %_10.sroa.0.i, i64 %_510.i.i, i1 false), !noalias !19
  %21 = add i64 %len.i.i.i.i, %_510.i.i
  store i64 %21, ptr %18, align 8, !alias.scope !19, !noalias !20
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %_10.sroa.0.i)
  br label %alloc::string::String::push.exit

bb4.i:                                            ; preds = %start
  %_4.i = trunc i32 %c to i8
  tail call void @llvm.experimental.noalias.scope.decl(metadata !25)
  %22 = getelementptr inbounds i8, ptr %self, i64 16
  %_4.i.i = load i64, ptr %22, align 8, !alias.scope !28, !noundef !3
  %23 = load i64, ptr %self, align 8, !alias.scope !28, !noundef !3
  %_3.i.i = icmp eq i64 %_4.i.i, %23
  br i1 %_3.i.i, label %bb1.i.i, label %"alloc::vec::Vec<T,A>::push.exit.i"

bb1.i.i:                                          ; preds = %bb4.i
; call alloc::raw_vec::RawVec<T,A>::reserve_for_push
  tail call fastcc void @"alloc::raw_vec::RawVec<T,A>::reserve_for_push"(ptr noalias noundef nonnull align 8 dereferenceable(16) %self, i64 noundef %_4.i.i)
  %count.pre.i.i = load i64, ptr %22, align 8, !alias.scope !28
  br label %"alloc::vec::Vec<T,A>::push.exit.i"

"alloc::vec::Vec<T,A>::push.exit.i": ; preds = %bb1.i.i, %bb4.i
  %count.i.i = phi i64 [ %count.pre.i.i, %bb1.i.i ], [ %_4.i.i, %bb4.i ]
  %24 = getelementptr inbounds i8, ptr %self, i64 8
  %self1.i.i = load ptr, ptr %24, align 8, !alias.scope !28, !nonnull !3, !noundef !3
  %end.i.i = getelementptr inbounds i8, ptr %self1.i.i, i64 %count.i.i
  store i8 %_4.i, ptr %end.i.i, align 1, !noalias !28
  %25 = add i64 %count.i.i, 1
  store i64 %25, ptr %22, align 8, !alias.scope !28
  br label %alloc::string::String::push.exit

alloc::string::String::push.exit: ; preds = %"alloc::vec::Vec<T,A>::extend_from_slice.exit.i", %"alloc::vec::Vec<T,A>::push.exit.i"
  ret i1 false
}

; <alloc::string::String as core::fmt::Write>::write_str
; Function Attrs: inlinehint nonlazybind uwtable
define internal noundef zeroext i1 @"<alloc::string::String as core::fmt::Write>::write_str"(ptr noalias nocapture noundef align 8 dereferenceable(24) %self, ptr noalias nocapture noundef nonnull readonly align 1 %s.0, i64 noundef %s.1) unnamed_addr #2 {
start:
  tail call void @llvm.experimental.noalias.scope.decl(metadata !29)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !32)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !35)
  %0 = getelementptr inbounds i8, ptr %self, i64 16
  %len.i.i.i.i = load i64, ptr %0, align 8, !alias.scope !38, !noalias !39, !noundef !3
  %1 = load i64, ptr %self, align 8, !alias.scope !41, !noalias !39, !noundef !3
  %_7.i.i.i.i = sub i64 %1, %len.i.i.i.i
  %_5.i.i.i.i = icmp ult i64 %_7.i.i.i.i, %s.1
  br i1 %_5.i.i.i.i, label %bb1.i.i.i.i, label %"alloc::vec::Vec<T,A>::extend_from_slice.exit"

bb1.i.i.i.i:                                      ; preds = %start
; call alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
  tail call fastcc void @"alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle"(ptr noalias noundef nonnull align 8 dereferenceable(16) %self, i64 noundef %len.i.i.i.i, i64 noundef %s.1), !noalias !39
  %len.pre.i.i.i = load i64, ptr %0, align 8, !alias.scope !38, !noalias !39
  br label %"alloc::vec::Vec<T,A>::extend_from_slice.exit"

"alloc::vec::Vec<T,A>::extend_from_slice.exit": ; preds = %start, %bb1.i.i.i.i
  %len.i.i.i = phi i64 [ %len.i.i.i.i, %start ], [ %len.pre.i.i.i, %bb1.i.i.i.i ]
  %2 = getelementptr inbounds i8, ptr %self, i64 8
  %self1.i1.i.i = load ptr, ptr %2, align 8, !alias.scope !38, !noalias !39, !nonnull !3, !noundef !3
  %dst.i.i.i = getelementptr inbounds i8, ptr %self1.i1.i.i, i64 %len.i.i.i
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %dst.i.i.i, ptr nonnull align 1 %s.0, i64 %s.1, i1 false), !noalias !38
  %3 = add i64 %len.i.i.i, %s.1
  store i64 %3, ptr %0, align 8, !alias.scope !38, !noalias !39
  ret i1 false
}

; alloc::raw_vec::finish_grow
; Function Attrs: noinline nounwind nonlazybind uwtable
define internal fastcc void @alloc::raw_vec::finish_grow(ptr noalias nocapture noundef writeonly align 8 dereferenceable(24) %_0, i64 noundef %0, i64 %1, ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %current_memory) unnamed_addr #3 {
start:
  %2 = icmp eq i64 %0, 0
  br i1 %2, label %bb7, label %bb8

bb8:                                              ; preds = %start
  %3 = getelementptr inbounds i8, ptr %current_memory, i64 8
  %4 = load i64, ptr %3, align 8, !range !44, !noundef !3
  %.not = icmp eq i64 %4, 0
  br i1 %.not, label %bb1, label %bb2

bb7:                                              ; preds = %start
  %5 = getelementptr inbounds i8, ptr %_0, i64 8
  store i64 0, ptr %5, align 8
  br label %bb6

bb2:                                              ; preds = %bb8
  %ptr = load ptr, ptr %current_memory, align 8, !nonnull !3, !noundef !3
  %6 = getelementptr inbounds i8, ptr %current_memory, i64 16
  %7 = load i64, ptr %6, align 8, !noundef !3
  %cond = icmp eq i64 %4, %0
  tail call void @llvm.assume(i1 %cond)
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %bb1.i.i, label %bb4.i.i

bb1.i.i:                                          ; preds = %bb2
  %9 = icmp eq i64 %1, 0
  br i1 %9, label %bb2.i.i.i, label %bb4.i.i.i

bb2.i.i.i:                                        ; preds = %bb1.i.i
  %ptr6.i.i.i = inttoptr i64 %0 to ptr
  br label %bb5

bb4.i.i.i:                                        ; preds = %bb1.i.i
  %10 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1
  %_0.i.i.i.i = tail call noalias noundef ptr @__rust_alloc(i64 noundef %1, i64 noundef %0) #18
  br label %bb5

bb4.i.i:                                          ; preds = %bb2
  %cond.i.i = icmp ule i64 %7, %1
  tail call void @llvm.assume(i1 %cond.i.i)
  %raw_ptr.i.i = tail call noundef ptr @__rust_realloc(ptr noundef nonnull %ptr, i64 noundef %7, i64 noundef %0, i64 noundef %1) #18
  br label %bb5

bb1:                                              ; preds = %bb8
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %bb2.i.i, label %bb4.i.i24

bb2.i.i:                                          ; preds = %bb1
  %12 = add i64 %0, -1
  %_25.i.i = icmp sgt i64 %12, -1
  tail call void @llvm.assume(i1 %_25.i.i)
  %ptr6.i.i = inttoptr i64 %0 to ptr
  br label %bb5

bb4.i.i24:                                        ; preds = %bb1
  %13 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1
  %14 = add i64 %0, -1
  %_17.i.i.i = icmp sgt i64 %14, -1
  tail call void @llvm.assume(i1 %_17.i.i.i)
  %_0.i.i.i = tail call noalias noundef ptr @__rust_alloc(i64 noundef %1, i64 noundef %0) #18
  br label %bb5

bb5:                                              ; preds = %bb4.i.i24, %bb2.i.i, %bb4.i.i, %bb4.i.i.i, %bb2.i.i.i
  %_0.sroa.0.2.i.i.pn = phi ptr [ %raw_ptr.i.i, %bb4.i.i ], [ %ptr6.i.i.i, %bb2.i.i.i ], [ %_0.i.i.i.i, %bb4.i.i.i ], [ %ptr6.i.i, %bb2.i.i ], [ %_0.i.i.i, %bb4.i.i24 ]
  %15 = icmp eq ptr %_0.sroa.0.2.i.i.pn, null
  %16 = getelementptr inbounds i8, ptr %_0, i64 8
  %17 = getelementptr inbounds i8, ptr %_0, i64 16
  br i1 %15, label %bb12, label %bb13

bb13:                                             ; preds = %bb5
  store ptr %_0.sroa.0.2.i.i.pn, ptr %16, align 8
  store i64 %1, ptr %17, align 8
  br label %bb6

bb12:                                             ; preds = %bb5
  store i64 %0, ptr %16, align 8
  store i64 %1, ptr %17, align 8
  br label %bb6

bb6:                                              ; preds = %bb13, %bb12, %bb7
  %storemerge23 = phi i64 [ 1, %bb7 ], [ 0, %bb13 ], [ 1, %bb12 ]
  store i64 %storemerge23, ptr %_0, align 8
  ret void
}

; alloc::raw_vec::RawVec<T,A>::reserve_for_push
; Function Attrs: noinline nonlazybind uwtable
define internal fastcc void @"alloc::raw_vec::RawVec<T,A>::reserve_for_push"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self, i64 noundef %len) unnamed_addr #4 personality ptr @rust_eh_personality {
start:
  %_17.i = alloca %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", align 8
  %self3.i = alloca %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>", align 8
  tail call void @llvm.experimental.noalias.scope.decl(metadata !45)
  %0 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %len, i64 1)
  %_25.1.i = extractvalue { i64, i1 } %0, 1
  br i1 %_25.1.i, label %bb5.i, label %bb9.i

bb9.i:                                            ; preds = %start
  %_25.0.i = extractvalue { i64, i1 } %0, 0
  %_12.i = load i64, ptr %self, align 8, !alias.scope !45, !noundef !3
  %v1.i = shl i64 %_12.i, 1
  %_0.0.sroa.speculated.i.i = tail call noundef i64 @llvm.umax.i64(i64 %v1.i, i64 %_25.0.i)
  %_0.0.sroa.speculated.i17.i = tail call noundef i64 @llvm.umax.i64(i64 %_0.0.sroa.speculated.i.i, i64 8)
  %_4.i.i = icmp sgt i64 %_0.0.sroa.speculated.i17.i, -1
  %_0.sroa.0.0.i.i = zext i1 %_4.i.i to i64
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %self3.i), !noalias !45
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %_17.i), !noalias !45
  %1 = getelementptr inbounds i8, ptr %self, i64 8
  %2 = icmp eq i64 %_12.i, 0
  br i1 %2, label %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i", label %bb4.i.i

bb4.i.i:                                          ; preds = %bb9.i
  %self.val16.i = load ptr, ptr %1, align 8, !alias.scope !45, !nonnull !3, !noundef !3
  store ptr %self.val16.i, ptr %_17.i, align 8, !alias.scope !48, !noalias !45
  %_9.sroa.5.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_17.i, i64 16
  store i64 %_12.i, ptr %_9.sroa.5.0._0.sroa_idx.i.i, align 8, !alias.scope !48, !noalias !45
  br label %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"

"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i": ; preds = %bb4.i.i, %bb9.i
  %.sink.i.i = phi i64 [ 1, %bb4.i.i ], [ 0, %bb9.i ]
  %3 = getelementptr inbounds i8, ptr %_17.i, i64 8
  store i64 %.sink.i.i, ptr %3, align 8, !alias.scope !48, !noalias !45
; call alloc::raw_vec::finish_grow
  call fastcc void @alloc::raw_vec::finish_grow(ptr noalias nocapture noundef nonnull align 8 dereferenceable(24) %self3.i, i64 noundef %_0.sroa.0.0.i.i, i64 %_0.0.sroa.speculated.i17.i, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(24) %_17.i), !noalias !45
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %_17.i), !noalias !45
  %_39.i = load i64, ptr %self3.i, align 8, !range !51, !noalias !45, !noundef !3
  %trunc.not.i = icmp eq i64 %_39.i, 0
  %4 = getelementptr inbounds i8, ptr %self3.i, i64 8
  br i1 %trunc.not.i, label %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit.thread", label %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit"

"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit.thread": ; preds = %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"
  %v.0.i = load ptr, ptr %4, align 8, !noalias !45, !nonnull !3, !noundef !3
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self3.i), !noalias !45
  store ptr %v.0.i, ptr %1, align 8, !alias.scope !45
  store i64 %_0.0.sroa.speculated.i17.i, ptr %self, align 8, !alias.scope !45
  ret void

"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit": ; preds = %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"
  %e.0.i = load i64, ptr %4, align 8, !range !44, !noalias !45, !noundef !3
  %5 = getelementptr inbounds i8, ptr %self3.i, i64 16
  %e.1.i = load i64, ptr %5, align 8, !noalias !45
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self3.i), !noalias !45
  %cond = icmp eq i64 %e.0.i, 0
  br i1 %cond, label %bb5.i, label %bb7.i

bb5.i:                                            ; preds = %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit", %start
; call alloc::raw_vec::capacity_overflow
  tail call void @alloc::raw_vec::capacity_overflow() #19
  unreachable

bb7.i:                                            ; preds = %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit"
; call alloc::alloc::handle_alloc_error
  tail call void @alloc::alloc::handle_alloc_error(i64 noundef %e.0.i, i64 noundef %e.1.i) #19
  unreachable
}

; alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
; Function Attrs: cold nonlazybind uwtable
define internal fastcc void @"alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle"(ptr noalias nocapture noundef align 8 dereferenceable(16) %slf, i64 noundef %len, i64 noundef %additional) unnamed_addr #5 personality ptr @rust_eh_personality {
start:
  %_17.i = alloca %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", align 8
  %self3.i = alloca %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>", align 8
  tail call void @llvm.experimental.noalias.scope.decl(metadata !52)
  %0 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %len, i64 %additional)
  %_25.1.i = extractvalue { i64, i1 } %0, 1
  br i1 %_25.1.i, label %bb5.i, label %bb9.i

bb9.i:                                            ; preds = %start
  %_25.0.i = extractvalue { i64, i1 } %0, 0
  %_12.i = load i64, ptr %slf, align 8, !alias.scope !52, !noundef !3
  %v1.i = shl i64 %_12.i, 1
  %_0.0.sroa.speculated.i.i = tail call noundef i64 @llvm.umax.i64(i64 %v1.i, i64 %_25.0.i)
  %_0.0.sroa.speculated.i17.i = tail call noundef i64 @llvm.umax.i64(i64 %_0.0.sroa.speculated.i.i, i64 8)
  %_4.i.i = icmp sgt i64 %_0.0.sroa.speculated.i17.i, -1
  %_0.sroa.0.0.i.i = zext i1 %_4.i.i to i64
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %self3.i), !noalias !52
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %_17.i), !noalias !52
  %1 = getelementptr inbounds i8, ptr %slf, i64 8
  %2 = icmp eq i64 %_12.i, 0
  br i1 %2, label %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i", label %bb4.i.i

bb4.i.i:                                          ; preds = %bb9.i
  %self.val16.i = load ptr, ptr %1, align 8, !alias.scope !52, !nonnull !3, !noundef !3
  store ptr %self.val16.i, ptr %_17.i, align 8, !alias.scope !55, !noalias !52
  %_9.sroa.5.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_17.i, i64 16
  store i64 %_12.i, ptr %_9.sroa.5.0._0.sroa_idx.i.i, align 8, !alias.scope !55, !noalias !52
  br label %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"

"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i": ; preds = %bb4.i.i, %bb9.i
  %.sink.i.i = phi i64 [ 1, %bb4.i.i ], [ 0, %bb9.i ]
  %3 = getelementptr inbounds i8, ptr %_17.i, i64 8
  store i64 %.sink.i.i, ptr %3, align 8, !alias.scope !55, !noalias !52
; call alloc::raw_vec::finish_grow
  call fastcc void @alloc::raw_vec::finish_grow(ptr noalias nocapture noundef nonnull align 8 dereferenceable(24) %self3.i, i64 noundef %_0.sroa.0.0.i.i, i64 %_0.0.sroa.speculated.i17.i, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(24) %_17.i), !noalias !52
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %_17.i), !noalias !52
  %_39.i = load i64, ptr %self3.i, align 8, !range !51, !noalias !52, !noundef !3
  %trunc.not.i = icmp eq i64 %_39.i, 0
  %4 = getelementptr inbounds i8, ptr %self3.i, i64 8
  br i1 %trunc.not.i, label %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit.thread", label %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit"

"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit.thread": ; preds = %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"
  %v.0.i = load ptr, ptr %4, align 8, !noalias !52, !nonnull !3, !noundef !3
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self3.i), !noalias !52
  store ptr %v.0.i, ptr %1, align 8, !alias.scope !52
  store i64 %_0.0.sroa.speculated.i17.i, ptr %slf, align 8, !alias.scope !52
  ret void

"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit": ; preds = %"alloc::raw_vec::RawVec<T,A>::current_memory.exit.i"
  %e.0.i = load i64, ptr %4, align 8, !range !44, !noalias !52, !noundef !3
  %5 = getelementptr inbounds i8, ptr %self3.i, i64 16
  %e.1.i = load i64, ptr %5, align 8, !noalias !52
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self3.i), !noalias !52
  %cond = icmp eq i64 %e.0.i, 0
  br i1 %cond, label %bb5.i, label %bb7.i

bb5.i:                                            ; preds = %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit", %start
; call alloc::raw_vec::capacity_overflow
  tail call void @alloc::raw_vec::capacity_overflow() #19
  unreachable

bb7.i:                                            ; preds = %"alloc::raw_vec::RawVec<T,A>::grow_amortized.exit"
; call alloc::alloc::handle_alloc_error
  tail call void @alloc::alloc::handle_alloc_error(i64 noundef %e.0.i, i64 noundef %e.1.i) #19
  unreachable
}

; libtest::my_test_func_with_param
; Function Attrs: nonlazybind uwtable
define noundef zeroext i1 @libtest::my_test_func_with_param(ptr noalias noundef align 8 dereferenceable(24) %buffer, i32 noundef %0) unnamed_addr #0 {
core::fmt::Arguments::as_const_str.exit.i:
  %_7 = alloca [1 x %"core::fmt::rt::Argument<'_>"], align 8
  %args = alloca %"core::fmt::Arguments<'_>", align 8
  %value = alloca i32, align 4
  store i32 %0, ptr %value, align 4
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %args)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_7)
  store ptr %value, ptr %_7, align 8
  %1 = getelementptr inbounds i8, ptr %_7, i64 8
  store ptr @"core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt", ptr %1, align 8
  store ptr @alloc_d6cc9c75158bbcf20176688a556567dd, ptr %args, align 8
  %2 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 2, ptr %2, align 8
  %3 = getelementptr inbounds i8, ptr %args, i64 32
  store ptr null, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %args, i64 16
  store ptr %_7, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %args, i64 24
  store i64 1, ptr %5, align 8
; call core::fmt::write
  %6 = call noundef zeroext i1 @core::fmt::write(ptr noundef nonnull align 1 %buffer, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.1, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %args)
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %args)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_7)
  ret i1 %6
}

; Function Attrs: nonlazybind
declare i32 @rust_eh_personality(...) unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #7

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #8

; Function Attrs: nounwind nonlazybind allockind("alloc,uninitialized,aligned") allocsize(0) uwtable
declare noalias noundef ptr @__rust_alloc(i64 noundef, i64 allocalign noundef) unnamed_addr #9

; Function Attrs: nounwind nonlazybind allockind("realloc,aligned") allocsize(3) uwtable
declare noalias noundef ptr @__rust_realloc(ptr allocptr noundef, i64 noundef, i64 allocalign noundef, i64 noundef) unnamed_addr #10

; alloc::raw_vec::capacity_overflow
; Function Attrs: noinline noreturn nonlazybind uwtable
declare void @alloc::raw_vec::capacity_overflow() unnamed_addr #11

; alloc::alloc::handle_alloc_error
; Function Attrs: cold noreturn nonlazybind uwtable
declare void @alloc::alloc::handle_alloc_error(i64 noundef, i64 noundef) unnamed_addr #12

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #13

; Function Attrs: nounwind nonlazybind allockind("free") uwtable
declare void @__rust_dealloc(ptr allocptr noundef, i64 noundef, i64 noundef) unnamed_addr #14

; core::fmt::write
; Function Attrs: nonlazybind uwtable
declare noundef zeroext i1 @core::fmt::write(ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias nocapture noundef readonly align 8 dereferenceable(48)) unnamed_addr #0

; core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
; Function Attrs: nonlazybind uwtable
declare noundef zeroext i1 @"core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt"(ptr noalias noundef readonly align 4 dereferenceable(4), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #15

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #15

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #17

attributes #0 = { nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #1 = { nounwind nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #2 = { inlinehint nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #3 = { noinline nounwind nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #4 = { noinline nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #5 = { cold nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #6 = { nonlazybind "target-cpu"="x86-64" }
attributes #7 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #8 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #9 = { nounwind nonlazybind allockind("alloc,uninitialized,aligned") allocsize(0) uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #10 = { nounwind nonlazybind allockind("realloc,aligned") allocsize(3) uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #11 = { noinline noreturn nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #12 = { cold noreturn nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #13 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #14 = { nounwind nonlazybind allockind("free") uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" }
attributes #15 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #16 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #17 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #18 = { nounwind }
attributes #19 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 8, !"PIC Level", i32 2}
!1 = !{i32 2, !"RtLibUseGOT", i32 1}
!2 = !{!"rustc version 1.78.0-dev"}
!3 = !{}
!4 = !{!5}
!5 = distinct !{!5, !6, !"alloc::string::String::push: %self"}
!6 = distinct !{!6, !"alloc::string::String::push"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"core::char::methods::encode_utf8_raw: %dst.0"}
!9 = distinct !{!9, !"core::char::methods::encode_utf8_raw"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"alloc::vec::Vec<T,A>::extend_from_slice: %self"}
!12 = distinct !{!12, !"alloc::vec::Vec<T,A>::extend_from_slice"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"<alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend: %self"}
!15 = distinct !{!15, !"<alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"alloc::vec::Vec<T,A>::append_elements: %self"}
!18 = distinct !{!18, !"alloc::vec::Vec<T,A>::append_elements"}
!19 = !{!17, !14, !11, !5}
!20 = !{!21}
!21 = distinct !{!21, !12, !"alloc::vec::Vec<T,A>::extend_from_slice: %other.0"}
!22 = !{!23, !17, !14, !11, !5}
!23 = distinct !{!23, !24, !"alloc::vec::Vec<T,A>::reserve: %self"}
!24 = distinct !{!24, !"alloc::vec::Vec<T,A>::reserve"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"alloc::vec::Vec<T,A>::push: %self"}
!27 = distinct !{!27, !"alloc::vec::Vec<T,A>::push"}
!28 = !{!26, !5}
!29 = !{!30}
!30 = distinct !{!30, !31, !"alloc::vec::Vec<T,A>::extend_from_slice: %self"}
!31 = distinct !{!31, !"alloc::vec::Vec<T,A>::extend_from_slice"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"<alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend: %self"}
!34 = distinct !{!34, !"<alloc::vec::Vec<T,A> as alloc::vec::spec_extend::SpecExtend<&T,core::slice::iter::Iter<T>>>::spec_extend"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"alloc::vec::Vec<T,A>::append_elements: %self"}
!37 = distinct !{!37, !"alloc::vec::Vec<T,A>::append_elements"}
!38 = !{!36, !33, !30}
!39 = !{!40}
!40 = distinct !{!40, !31, !"alloc::vec::Vec<T,A>::extend_from_slice: %other.0"}
!41 = !{!42, !36, !33, !30}
!42 = distinct !{!42, !43, !"alloc::vec::Vec<T,A>::reserve: %self"}
!43 = distinct !{!43, !"alloc::vec::Vec<T,A>::reserve"}
!44 = !{i64 0, i64 -9223372036854775807}
!45 = !{!46}
!46 = distinct !{!46, !47, !"alloc::raw_vec::RawVec<T,A>::grow_amortized: %self"}
!47 = distinct !{!47, !"alloc::raw_vec::RawVec<T,A>::grow_amortized"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"alloc::raw_vec::RawVec<T,A>::current_memory: %_0"}
!50 = distinct !{!50, !"alloc::raw_vec::RawVec<T,A>::current_memory"}
!51 = !{i64 0, i64 2}
!52 = !{!53}
!53 = distinct !{!53, !54, !"alloc::raw_vec::RawVec<T,A>::grow_amortized: %self"}
!54 = distinct !{!54, !"alloc::raw_vec::RawVec<T,A>::grow_amortized"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"alloc::raw_vec::RawVec<T,A>::current_memory: %_0"}
!57 = distinct !{!57, !"alloc::raw_vec::RawVec<T,A>::current_memory"}
